{"version":3,"sources":["../src/index.tsx"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { useMemo, type ReactElement, type CSSProperties } from 'react';\n\n\nfunction translateX (x: number) {\n  return `translate(${x},0)`;\n}\n\nfunction translateY (y: number) {\n  return `translate(0,${y})`;\n}\n\nfunction number <TVal> (scale: (d: TVal) => number) {\n  return (d: TVal) => +scale(d);\n}\n\nfunction center <TVal> (\n  scale: {\n    (d: TVal): number;\n    bandwidth: () => number;\n    round: () => unknown;\n  },\n) {\n  let offset = Math.max(\n    0, scale.bandwidth() - 1,\n  ) / 2; // Adjust for 0.5px offset.\n  if (scale.round()){\n    offset = Math.round(offset);\n  }\n  return (d: TVal) => {\n    return +scale(d) + offset;\n  };\n}\n\nexport interface IAxisScale <\n    TValueType = unknown,\n    TTickArgs extends any[] = unknown[],\n    TTickFormatArgs extends any[] = unknown[],\n> {\n    (d: TValueType): number;\n    range: () => number[];\n    tickFormat?: (...args: TTickFormatArgs) => (n: TValueType) => string;\n    ticks?: (...args: TTickArgs) => TValueType[];\n    domain?: () => TValueType[];\n    copy: () => IAxisScale<TValueType, TTickArgs, TTickFormatArgs>;\n}\ninterface IBandScale <\n    TValueType = unknown,\n    TTickArgs extends any[] = unknown[],\n    TTickFormatArgs extends any[] = unknown[],\n> extends IAxisScale<TValueType, TTickArgs> {\n    bandwidth: () => number;\n    round: () => unknown;\n    copy: () => IBandScale<TValueType, TTickArgs, TTickFormatArgs>;\n}\n\nexport interface IProps <\n    TValueType = unknown,\n    TTickArgs extends any[] = unknown[],\n    TTickFormatArgs extends any[] = TTickArgs,\n> {\n    orient: 'top' | 'bottom' | 'left' | 'right';\n    scale: IAxisScale<TValueType, TTickArgs, TTickFormatArgs> | IBandScale<TValueType, TTickArgs, TTickFormatArgs>;\n    scaleRev?: unknown;\n    /**\n     * `tickArguments` are only passed to the scale; they are not passed to `tickFormat`.\n     */\n    tickArguments?: TTickFormatArgs;\n    tickValues?: TValueType[];\n\n    /**\n     * Sets the tick format function.\n     * If undefined, the scale's default formatter will be used.\n     */\n    tickFormat?: (n: TValueType) => string;\n    tickSize?: number;\n    tickSizeInner?: number;\n    tickSizeOuter?: number;\n    tickPadding?: number;\n\n    strokeColor?: string;\n    color?: string;\n}\n\n\n/**\n * The d3 axis, with some improvements.\n * The style is configurable.\n * The path and lines are now centered on the axis and scale values and use `shape-rendering: crispEdges`.\n *\n * Usage:\n * ```tsx\n * <Axis\n *   orient=\"bottom\"\n *   scale={scale}\n *   tickArguments={[2]}\n * />\n * ```\n */\nexport const Axis = <\n    TValueType,\n    TTickArgs extends any[] = unknown[],\n    TTickFormatArgs extends TTickArgs = TTickArgs,\n> (\n  props: IProps<TValueType, TTickArgs, TTickFormatArgs>,\n): ReactElement => {\n  const {\n    scale,\n    orient,\n    tickSizeOuter = 6,\n    tickSizeInner = 6,\n    tickPadding = 3,\n    tickFormat,\n    tickValues,\n    strokeColor,\n    color,\n  } = props;\n  const tickArguments: TTickFormatArgs =\n    props.tickArguments ??\n    [] as any as TTickFormatArgs\n  ;\n  const isVert = orient === 'left' || orient === 'right';\n  const isTopOrLeft = orient === 'top' || orient === 'left';\n  const posOrNeg = isTopOrLeft ? -1 : 1;\n  const xOrY = isVert ? 'x' : 'y';\n  const range: number[] = scale.range();\n  const range0 = +range[0];\n  const range1 = +range[range.length - 1];\n  const spacing = Math.max(\n    tickSizeInner, 0,\n  ) + tickPadding;\n\n  const pathD = useMemo(\n    () => {\n      if (isVert) {\n        // vertical\n        const x0 = posOrNeg * tickSizeOuter;\n        return `M${x0},${range0}` +\n          'H0' +\n          `V${range1}` +\n          `H${x0}`\n        ;\n      } else {\n        // horizontal\n        const y0 = posOrNeg * tickSizeOuter;\n        return `M${range0},${y0}` +\n          'V0' +\n          `H${range1}` +\n          `V${y0}`\n        ;\n      }\n    }, [posOrNeg, tickSizeOuter, range0, range1, isVert],\n  );\n\n  const tickTextStyle: CSSProperties = {\n    textAnchor: isVert ?\n      isTopOrLeft ? 'end' : 'start' :\n      'middle'\n    ,\n    fontFamily: 'sans-serif',\n    fontSize: 10,\n  }\n\n  const textProps = {\n    fill: color ?? 'currentColor',\n    [xOrY]: posOrNeg * spacing,\n    dy: orient === 'top' ?\n      '0em' :\n      orient === 'bottom' ?\n        '0.71em' :\n        '0.32em'\n    ,\n    style: tickTextStyle,\n  }\n  const tickLineProps = {\n    [`${xOrY}2`]: posOrNeg * tickSizeInner,\n  };\n\n  const tickTextFormatter: (val: TValueType) => string =\n    tickFormat ??\n    scale.tickFormat?.(...tickArguments) ??\n    ((x) => String(x))\n  ;\n\n  const values: TValueType[] =\n    tickValues ??\n    scale.ticks?.(...tickArguments) ??\n    scale.domain!()\n  ;\n\n  const translate = isVert ? translateY : translateX;\n  const position = (\n    (scale as Partial<IBandScale<any, any>>).bandwidth ?\n      center :\n      number\n  )((scale as IBandScale<TValueType, TTickArgs>).copy());\n\n  return (\n    <>\n      <path\n        stroke={strokeColor ?? color ?? 'currentColor'}\n        d={pathD}\n        shapeRendering=\"crispEdges\"\n        fill=\"none\"\n      />\n      {values.map((\n        val, i,\n      ) => (\n        <g key={i} opacity=\"1\" transform={translate(position(val))}>\n          <line\n            stroke={strokeColor ?? color ?? 'currentColor'}\n            {...tickLineProps}\n          />\n          <text {...textProps}>\n            {tickTextFormatter(val)}\n          </text>\n        </g>\n      ))}\n    </>\n  );\n}\n"],"mappings":"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","names":[]}